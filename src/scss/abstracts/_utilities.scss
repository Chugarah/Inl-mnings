@use "@scss/abstracts/_functions" as f; /// @name content-container

/// @group Utility
///
///
.display-none {
  display: none;
}

/// =============================================================================
/// Box Shadow Mixin (Multiple Shadows)
/// =============================================================================

/// @name box-shadow
/// @group Effects
///
/// Applies customizable box shadow or filter drop shadow effects to an element.
/// Supports multiple stacked shadows for both box-shadow and filter: drop-shadow().
/// Now includes support for inner shadows (inset) for box-shadow.
///
/// @param {Boolean} $filter [false] - If true, applies filter drop shadow instead of box shadow
/// @param {List} $shadows... - List of shadow parameters, each set enclosed in parentheses
///
/// @example code-scss
///   .element-with-multiple-shadows {
///     @include box-shadow(
///       false,
///       (2px 2px 4px 1px #000000 0.5),
///       (0 4px 6px null #0000FF 0.3),
///       (-1px -1px 2px null #FF0000 0.2)
///     );
///   }
///
///   .element-with-inner-shadow {
///     @include box-shadow(
///       false,
///       (inset 0 2px 4px 1px #000000 0.5)
///     );
///   }
///
///   .filtered-element-with-multiple-shadows {
///     @include box-shadow(
///       true,
///       (2px 2px 4px #000000 0.5),
///       (0 4px 6px #0000FF 0.3),
///       (-1px -1px 2px #FF0000 0.2)
///     );
///   }
///
/// @link https://www.rapidtables.com/convert/color/hex-to-rgb.html
///
/// @description
/// For box-shadow: [inset] [offset-x] [offset-y] [blur-radius] [spread-radius] [color] [opacity]
/// For filter: drop-shadow(): [offset-x] [offset-y] [blur-radius] [color] [opacity]
/// The mixin uses the hex-to-rgb function to convert the shadow color from hex to rgba.
/// This mixin supports multiple stacked shadows and correctly handles both box-shadow
/// and filter: drop-shadow(), ensuring proper CSS syntax for multiple drop-shadow filters.
/// Inner shadows (inset) are now supported for box-shadow.
///
/// @note
/// For filter: drop-shadow(), each shadow is applied as a separate drop-shadow() function,
/// allowing for correct stacking of multiple filter shadows. Inset shadows are not supported
/// for filter: drop-shadow().
///
/// @implementation
/// The mixin loops through each provided shadow, constructs the appropriate string
/// representation, and then combines them into either a single box-shadow property
/// or multiple drop-shadow() functions within a filter property.
///
/// This implementation ensures compatibility with CSS specifications for both
/// box-shadow and filter: drop-shadow(), providing maximum flexibility and correct
/// rendering of multiple shadows in both contexts, including inner shadows for box-shadow.

/// The code below is 100% improved using AI Phind, Previous solution just supported one
/// shadow now we can have unlimited stacked shadow both filter and box-shadow. AI even
/// created the Documentation above :P, Added now to support inner shadow using Inset :)
@mixin box-shadow($filter: false, $shadows...) {
  $result: (
  );

@each $shadow in $shadows {
  $inset: if(nth($shadow, 1)==inset, inset, null);
  $start-index: if($inset, 2, 1);

  $sh-x: nth($shadow, $start-index);
  $sh-y: nth($shadow, $start-index + 1);
  $sh-blur: nth($shadow, $start-index + 2);
  $sh-spread: if(length($shadow) > $start-index + 4,
      nth($shadow, $start-index + 3),
      null);
  $sh-color: nth($shadow, -2);
  $opacity: nth($shadow, -1);

  $shadow-string: "";

  @if $filter {
    $shadow-string: #{$sh-x} #{$sh-y} #{$sh-blur} #{f.hex-to-rgb($sh-color, $opacity)};
  }

  @else {
    $shadow-string: #{$inset} #{$sh-x} #{$sh-y} #{$sh-blur} #{$sh-spread} #{f.hex-to-rgb($sh-color, $opacity)};
  }

  @if $filter {
    $result: append($result, drop-shadow($shadow-string));
  }

  @else {
    $result: append($result, $shadow-string, comma);
  }
}

@if $filter {
  filter: $result;
}

@else {
  box-shadow: $result;
}
}

/// =============================================================================
/// Image Background Mixin
/// =============================================================================

/// @name image-background
/// @group Layout
///
/// Applies background styling to an element, typically used for image containers.
///
/// @param {Color} $bg-color-ib - Background color of the container
/// @param {Length} $border-radius-ib - Border radius of the container
/// @param {Length} $padding-x-ib - Horizontal padding of the container
/// @param {Length} $padding-y-ib - Vertical padding of the container
///
/// @example code-scss
///   .image-container {
///     @include image-background(#f5f5f5, 10px, 15px, 20px);
///   }
///
/// @description
/// This mixin sets the background color, border radius, and padding for an element.
/// It's commonly used to create consistent styling for image containers or background elements.
@mixin background-generator($bg-color-ib,
  $border-radius-ib,
  $padding-x-ib,
  $padding-y-ib,
  $bg-position: null) {
  background-color: $bg-color-ib;
  border-radius: $border-radius-ib;
  padding: $padding-y-ib $padding-x-ib;

  @if $bg-position !=null {
    position: $bg-position;
  }
}

/// =============================================================================


/// =============================================================================
/// Padding & Spacing Helpers
/// =============================================================================

@mixin padding-left-right($padding-left, $padding-right) {
  padding-left: $padding-left;
  padding-right: $padding-right;
}

@mixin padding-top-bottom($padding-top, $padding-bottom) {
  padding-top: $padding-top;
  padding-bottom: $padding-bottom;
}