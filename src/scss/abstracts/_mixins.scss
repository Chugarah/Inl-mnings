@use "@scss/abstracts/_variables" as a;
/// =============================================================================
/// Form Elements
/// =============================================================================

/// @name Checkbox
///
/// Base Component's for an switch
///
@mixin toggle {
  position: relative;
  display: inline-block;
}

@mixin slider($bg) {
  --_primary-width: 2.875em;
  --_primary-height: 1.5em;

  position: absolute;
  inset: 0;
  background-color: $bg;
  border-radius: 100vw;
  cursor: pointer;
  transition: background-color 0.3s ease-in-out;
  height: var(--_primary-height);
  width: var(--_primary-width);

  /// Pseudo
  /// This one creates the bal inside the slider
  &::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0%;
    width: calc(min(100%, var(--_primary-height)));
    transform: translateY(-50%);
    height: 83%;
    border-radius: 50%;
    aspect-ratio: 1;
  }
}

/// A awesome way to hide the checkbox
@mixin hide-check-box {
  width: 0;
  height: 0;
  opacity: 0;
}

/// @name Buttons
///
/// Base Component's for an buttons
///

@mixin btn($position: null) {
  text-align: center;
  text-decoration: none;
  display: inline-block;
  border: none;

  /// Extra props incase we want to add an example an image inside
  @if $position !=null {
    position: $position;
  }
}

/// Applying Button colors and border radios
/// Standard Button Props
@mixin btn-props($text, $bg, $border-radius, $padding...) {
  background-color: $bg;
  color: $text;
  border-radius: $border-radius;
  padding: $padding;
}

/// =============================================================================
/// Links
/// =============================================================================

/// Interactive Element Styles
/// Implemented by AI Phind, for this code
/// to handle different pseudo states of an object
/// Interactive Element Styles
/// Applies interactive states (hover, active, focus-visible) to a given selector
///
/// @param {String} $selector - The selector to apply the interactive states to
///
/// @example code-scss
///   @include interactive-states('.button') {
///     // Button styles
///   }
///
/// @requires {mixin} link-nav-animation
///
/// @access public
@mixin interactive-states($selector) {
  #{$selector} {

    /// Adding Animation when mouse is out
    transition: color var(--interactive-transition-base) ease-in-out,
      background-color var(--interactive-transition-base) ease-in-out;
    cursor: pointer;
    outline: none;

    // Hover state
    &:hover {
      @include link-nav-animation(var(--interactive-color-hover),
        var(--interactive-relative-hover),
        var(--interactive-transition-hover),
        var(--interactive-bg-hover),
        var(--interactive-use-hsl-hover));
    }

    // Active state
    &:active {
      @include link-nav-animation(var(--interactive-color-active),
        var(--interactive-relative-active),
        var(--interactive-transition-active),
        var(--interactive-bg-active),
        var(--interactive-use-hsl-active));
    }

    // Focus-visible state
    &:focus-visible {
      @include link-nav-animation(var(--interactive-color-focus-visible),
        var(--interactive-relative-focus-visible),
        var(--interactive-transition-focus-visible),
        var(--interactive-bg-focus-visible),
        var(--interactive-use-hsl-focus-visible));
    }
  }
}

/// AN basic interactive states for links
@mixin is-base-links($color-hover, $color-active, $color-focus) {
  --interactive-bg-hover: null;
  --interactive-bg-active: null;
  --interactive-bg-focus-visible: null;
  --interactive-color-hover: #{$color-hover};
  --interactive-color-active: #{$color-active};
  --interactive-color-focus-visible: #{$color-focus};
  --interactive-relative-hover: 10;
  --interactive-relative-focus-visible: 10;
  @include interactive-states("&")
}


/// Animation Mixin
/// Used AI Phind to improve this code section
/// Applies color and background-color animations to interactive elements
///
/// @param {Color} $color - The color to be applied
/// @param {Number} $relative-value - The relative lightness value for HSL calculation
/// @param {Time} $transition-time - The duration of the transition
/// @param {Color} $bg-color [null] - The background color to be applied (optional)
/// @param {Boolean} $use-hsl [true] - Whether to use HSL color calculations
///
/// @example code-scss
///   .button {
///     @include link-nav-animation(#007bff, 10, 0.3s, #f8f9fa, true);
///   }
///
/// @access public
@mixin link-nav-animation($color,
  $relative-value,
  $transition-time,
  $bg-color: null,
  $use-hsl: true) {

  @if $bg-color !=null {
    background-color: $bg-color;
  }

  @if $use-hsl {
    /// SCSS code is read from top to bottom
    /// We are setting the fallback color
    /// If the browser supports HSL than it will overide this one :D
    $_fallback-color: $color;

    @if $bg-color !=null {
      background-color: $bg-color;
    }

    /// Modern Browsers will use this baby :D
    /// Remember we are taking in floats and not strings here
    @supports (color: hsl(from var(--color) h s l)) {
      color: hsl(from #{$color} h s calc(l + #{$relative-value}));

      @if $bg-color !=null {
        background-color: hsl(from #{$bg-color} h s calc(l + #{$relative-value}));
      }
    }
  }

  @else {
    color: $color;
  }
}


/// =============================================================================
/// Other Components
/// =============================================================================

/// @name logo-box
/// @group Component
///
/// https://caniuse.com/?search=hsl%20relative
/// For links hover state, active and so on, color and pointer with
/// animation.
///
/// @param {String} $color - Color of the text
/// @param {String} $color - Color of the text
/// @param {String} $color - Color of the text

/// @example code-scss
///   @include a.link-nav-animation($color-primary, 0.2, 400ms);
/// }
/// AI Some of the code is generated from Phind
@mixin logo-box($padding-h, $padding-w, $logo-border-radius, $border-color) {
  padding: $padding-h $padding-w;
  /// Hard coded with and height
  width: 100%;
  height: 100%;

  /// Border
  border-radius: $logo-border-radius;
  border: 1px $border-color solid;
}