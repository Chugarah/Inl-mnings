/// =============================================================================
/// Layout
/// =============================================================================

/// @name container-query-wrapper
/// @group Layout
///
/// Creates a container for container queries
///
/// This mixin sets up a container to be used with CSS Container Queries.
/// It sets the container-type to inline-size and assigns a custom container-name.
///
/// @param {String} $container-name - The name of the container to be used in container queries
///
/// @example code-scss
///   .my-component {
///     @include container-query-wrapper('component-container');
///   }
///
/// @example code-css
///   .my-component {
///     container-type: inline-size;
///     container-name: component-container;
///   }
@mixin container-query-wrapper($container-name) {
  container-type: inline-size;
  container-name: $container-name;
}

/// @name grid-row-colum
/// @group Layout
///
/// Creates CSS Grid where auto size for height is based
/// on the content
///
/// @param {String} $gah-display-type-value - Value, grid, flex or something else, display type
/// @param {List} $gah-colums - List that is separated with space, amount of colums and size
/// @param {Number} $grid-row-repeat - How many times row should repeat
/// @param {Object} $gah-display-map - Contains Map for display type from vars
/// @param {List} $gah-display-map - Contains Map for display type from vars
/// @example code-scss
/// @include grid-auto-height(grid, grid-add-colum(1fr), 3, $display-type)
/// TODO: #1 Bugg, the mixin is not taking correct if statement based on wrong parameters
@mixin grid-row-colum(
  $gah-display-type-value,
  $gah-colums,
  $gah-row-height,
  $grid-row-repeat: null
) {
  display: $gah-display-type-value;
  grid-template-columns: $gah-colums;

  @if $grid-row-repeat !=null {
    grid-template-rows: repeat($grid-row-repeat, auto);
  } @else {
    grid-template-rows: $gah-row-height;
  }
}

/// @name grid-position
/// @group Layout
///
/// Sets the position of an element in the grid. Where to place it :D
///
/// @param {Number} $col-start - Starts from grid number in colum
/// @param {Number} $col-end - End to grid number in colum
/// @param {Number} $row-start - Starts from grid number in row
/// @param {Number} $row-end - End to grid number in row
/// @example code-scss
/// @include grid-auto-height(grid, grid-add-colum(1fr), 3, $display-type)
@mixin grid-position($col-start, $col-end, $row-start, $row-end) {
  grid-column: #{$col-start} / #{$col-end};
  grid-row: #{$row-start} / #{$row-end};
}

/// @name container-query
/// @group Layout
///
/// Container Query for responsive design, we check the with of container
/// and sending the container further, got help also from Phind for the part
/// where #{$max -1} to avoid clipping, layout changing i mid while going to
/// next breakpoint
///
/// @param {String} $container-name - The name of the container to be used in container queries
/// @param {String} $min - Min With of container size
/// @param {String} $max - Max With of container size, this also could be null
/// @example code-scss
/// Phones
///  @include a.container-query(header,0,map-get($map: $breakpoints, $key: 'medium')){
///    .header-navigation{
///      background-color: red;
///    }
///  }
@mixin container-query($container-name, $min, $max: null) {
  @if $max {
    @container #{$container-name} (min-width: #{$min}) and (max-width: #{$max - 1}) {
      /// Passing the content further
      @content;
    }
  } @else if $min {
    @container #{$container-name} (min-width: #{$min}) {
      /// Passing the content further
      @content;
    }
  }
}

/// Ai Generated from Phind
/// @name container-query
/// @group Layout
///
/// We are setting an container query and based on min and max values
/// we are passing content further using @content code
///
/// @param {String} $container-name - Container name (Wrapper name)
/// @param {String} $min - Minimum width of the container
/// @param {String} $max - Maximum width of the container
/// @example code-scss
/// @include a.container-query(header,0, 768px){
///  .header-navigation{
///   background-color: blue;
///  }
/// }

@mixin content-width($max-width, $width) {
  max-width: $max-width;
  margin: 0 auto;
  width: $width;
}

/// @name content-width
/// @group Layout
///
/// Setting max with of content element and also the with
///
/// @param {String} $max-width - Max width for the content
/// @param {String} $width - With of the content
/// @example code-scss
///   @include content-width(81.25rem, 100%)
/// }

/// @name flex
/// @group Layout
///
/// Telling it's flex and how to align it
///
/// @param {String} $max-width - Max width for the content
/// @param {String} $width - With of the content
/// @example code-scss
///   @include content-width(81.25rem, 100%)
/// }
@mixin flex($align-items) {
  display: flex;
  align-items: $align-items;
}

/// =============================================================================
/// Form Elements
/// =============================================================================

/// @name Checkbox
///
/// Base Component's for an switch
///
@mixin toggle {
  position: relative;
  display: inline-block;
}

@mixin slider($bg) {
  --_primary-width: 2.875em;
  --_primary-height: 1.5em;

  position: absolute;
  inset: 0;
  background-color: $bg;
  border-radius: 100vw;
  cursor: pointer;
  transition: background-color 0.3s ease-in-out;
  height: var(--_primary-height);
  width: var(--_primary-width);

  /// Pseudo
  /// This one creates the bal inside the slider
  &::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0%;
    width: calc(min(100%, var(--_primary-height)));
    transform: translateY(-50%);
    height: 83%;
    border-radius: 50%;
    aspect-ratio: 1;
  }
}

/// A awesome way to hide the checkbox
@mixin hide-check-box {
  width: 0;
  height: 0;
  opacity: 0;
}

/// @name Buttons
///
/// Base Component's for an buttons
///

@mixin btn($position: null) {
  text-align: center;
  text-decoration: none;
  display: inline-block;
  border: none;

  /// Extra props incase we want to add an example an image inside
  @if $position !=null {
    position: $position;
  }
}

/// Applying Button colors and border radios
/// Standard Button Props
@mixin btn-props($text, $bg, $border-radius, $padding...) {
  background-color: $bg;
  color: $text;
  border-radius: $border-radius;
  padding: $padding;
}

/// =============================================================================
/// Links
/// =============================================================================

/// @name link-nav-animation
/// @group Text
///
/// https://caniuse.com/?search=hsl%20relative
/// For links hover state, active and so on, color and pointer with
/// animation.
///
/// @param {String} $color - Color of the text
/// @param {Float} $relative-value - How many percentage from the from color value
/// @param {String} $transition-time - How fast the animation should be in milliseconds
/// @param {String} $bg-color - Background color, that could be null
/// @param {String} $fb-color - Fallback Color incase of not using HSL
/// @example code-scss
///   @include a.link-nav-animation($color-primary, 0.2, 400ms);
/// }
/// AI Some of the code is generated from Phind
@mixin link-nav-animation(
  $color,
  $relative-value,
  $transition-time,
  $bg-color: null,
  $use-hsl
) {
  transition: color $transition-time ease-in-out,
    background-color $transition-time ease-in-out;
  cursor: pointer;
  outline: none;

  /// Lets see if the bg is null or not
  @if $bg-color !=null {
    background-color: $bg-color;
  }

  /// Can we use relative colors
  @if $use-hsl ==true {
    color: hsl(from $color h s calc(l + $relative-value));

    /// Lets see if the bg is null or not
    @if $bg-color !=null {
      background-color: hsl(from $bg-color h s calc(l + $relative-value));
    }
  } @else {
    color: $color;
  }
}

/// =============================================================================
/// Other Components
/// =============================================================================

/// @name logo-box
/// @group Component
///
/// https://caniuse.com/?search=hsl%20relative
/// For links hover state, active and so on, color and pointer with
/// animation.
///
/// @param {String} $color - Color of the text
/// @param {String} $color - Color of the text
/// @param {String} $color - Color of the text

/// @example code-scss
///   @include a.link-nav-animation($color-primary, 0.2, 400ms);
/// }
/// AI Some of the code is generated from Phind
@mixin logo-box($padding-h, $padding-w, $logo-border-radius, $border-color) {
  padding: $padding-h $padding-w;
  /// Hard coded with and height
  width: 100%;
  height: 100%;

  /// Border
  border-radius: $logo-border-radius;
  border: 1px $border-color solid;
}
